ARG CUDA_VERSION=notset
FROM nvidia/cuda:$CUDA_VERSION-runtime-ubuntu22.04
ARG CUDA_VERSION
ARG RAPIDS_VERSION
  # Should be first 4 digits (e.g. 24.06)
ARG NCCL_VERSION
ARG RAPIDSAI_CONDA_CHANNEL="rapidsai"
ARG MINIFORGE_VERSION=24.9.2-0
ARG PYTHON_VERSION=3.10

SHELL ["/bin/bash", "-c"]

ENV DEBIAN_FRONTEND=noninteractive
ENV PATH=/opt/miniforge/bin:$PATH
ENV GOSU_VERSION=1.10
ENV JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64/

# Install all basic requirements
RUN \
    export CUDA_SHORT=`echo $CUDA_VERSION | grep -o -E '[0-9]+\.[0-9]'` && \
    export NCCL_VERSION=$NCCL_VERSION && \
    apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2204/x86_64/3bf863cc.pub && \
    apt-get update && \
    apt-get install -y wget unzip bzip2 libgomp1 build-essential openjdk-8-jdk-headless && \
    apt-get install "libnccl2=${NCCL_VERSION}+cuda${CUDA_SHORT}" \
      "libnccl-dev=${NCCL_VERSION}+cuda${CUDA_SHORT}" -y --allow-change-held-packages && \
    # Miniforge
    wget -nv -O conda.sh https://github.com/conda-forge/miniforge/releases/download/$MINIFORGE_VERSION/Miniforge3-$MINIFORGE_VERSION-Linux-x86_64.sh && \
    bash conda.sh -b -p /opt/miniforge

# Create new Conda environment with cuDF, Dask, and cuPy
RUN \
    export NCCL_SHORT_VER=$(echo "$NCCL_VERSION" | cut -d "-" -f 1) && \
    export CUDA_SHORT_VER=$(echo "$CUDA_VERSION" | grep -o -E '[0-9]+\.[0-9]') && \
    mamba create -y -n gpu_test -c ${RAPIDSAI_CONDA_CHANNEL} -c conda-forge -c nvidia \
        python=$PYTHON_VERSION "cudf=$RAPIDS_VERSION.*" "rmm=$RAPIDS_VERSION.*" cuda-version=$CUDA_SHORT_VER \
        "nccl=${NCCL_SHORT_VER}" \
        dask \
        distributed \
        "dask-cuda=$RAPIDS_VERSION.*" "dask-cudf=$RAPIDS_VERSION.*" cupy \
        numpy pytest pytest-timeout scipy scikit-learn pandas matplotlib wheel \
        python-kubernetes urllib3 graphviz hypothesis "loky>=3.5.1" \
        "pyspark>=3.4.0,<4.0" cloudpickle cuda-python && \
    mamba clean --all --yes

# Install lightweight sudo (not bound to TTY)
RUN set -ex; \
    wget -nv -O /usr/local/bin/gosu "https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-amd64" && \
    chmod +x /usr/local/bin/gosu && \
    gosu nobody true

# Default entry-point to use if running locally
# It will preserve attributes of created files
COPY entrypoint.sh /scripts/

WORKDIR /workspace
ENTRYPOINT ["/scripts/entrypoint.sh"]
