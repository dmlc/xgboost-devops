ARG CUDA_VERSION=notset
FROM nvcr.io/nvidia/cuda:$CUDA_VERSION-devel-rockylinux8
ARG CUDA_VERSION
ARG NCCL_VERSION
ARG RAPIDS_VERSION
ARG MINIFORGE_VERSION=24.9.2-0
ARG CMAKE_VERSION=3.31.2

SHELL ["/bin/bash", "-c"]

ENV PATH=/opt/miniforge/bin:/usr/local/ninja:$PATH
ENV CC=/opt/rh/gcc-toolset-10/root/usr/bin/gcc
ENV CXX=/opt/rh/gcc-toolset-10/root/usr/bin/c++
ENV CPP=/opt/rh/gcc-toolset-10/root/usr/bin/cpp
ENV CUDAHOSTCXX=/opt/rh/gcc-toolset-10/root/usr/bin/c++
ENV GOSU_VERSION=1.10

# Install all basic requirements
RUN \
    curl -fsSL https://developer.download.nvidia.com/compute/cuda/repos/rhel7/x86_64/D42D0685.pub | sed '/^Version/d' \
        > /etc/pki/rpm-gpg/RPM-GPG-KEY-NVIDIA && \
    dnf -y update && \
    dnf -y install dnf-plugins-core && \
    dnf config-manager --set-enabled powertools && \
    dnf install -y tar unzip wget xz git which ninja-build gcc-toolset-10-gcc gcc-toolset-10-binutils gcc-toolset-10-gcc-c++ && \
    # Miniforge
    wget -nv -O conda.sh https://github.com/conda-forge/miniforge/releases/download/$MINIFORGE_VERSION/Miniforge3-$MINIFORGE_VERSION-Linux-x86_64.sh && \
    bash conda.sh -b -p /opt/miniforge && \
    /opt/miniforge/bin/python -m pip install awscli && \
    # CMake
    wget -nv -O cmake.sh https://github.com/Kitware/CMake/releases/download/v${CMAKE_VERSION}/cmake-${CMAKE_VERSION}-linux-x86_64.sh && \
    bash cmake.sh --skip-license --prefix=/usr

# NCCL2 (License: https://docs.nvidia.com/deeplearning/sdk/nccl-sla/index.html)
RUN \
    export CUDA_SHORT=`echo $CUDA_VERSION | grep -o -E '[0-9]+\.[0-9]'` && \
    export NCCL_VERSION=$NCCL_VERSION && \
    dnf config-manager --add-repo https://developer.download.nvidia.com/compute/cuda/repos/rhel7/x86_64/cuda-rhel7.repo && \
    dnf -y update && \
    dnf install -y libnccl-${NCCL_VERSION}+cuda${CUDA_SHORT} libnccl-devel-${NCCL_VERSION}+cuda${CUDA_SHORT}

# Install gRPC
# Patch Abseil to apply https://github.com/abseil/abseil-cpp/issues/1629
RUN git clone -b v1.65.4 https://github.com/grpc/grpc.git \
      --recurse-submodules --depth 1 && \
    pushd grpc && \
    pushd third_party/abseil-cpp && \
    git fetch origin master && \
    git cherry-pick -n cfde5f74e276049727f9556f13473a59fe77d9eb && \
    popd && \
    cmake -S . -B build -GNinja -DCMAKE_INSTALL_PREFIX=/opt/grpc -DCMAKE_CXX_VISIBILITY_PRESET=hidden && \
    cmake --build build --target install && \
    popd && \
    rm -rf grpc

# Install RMM
# Patch out -Werror
# Patch CCCL 2.5.0 to apply https://github.com/NVIDIA/cccl/pull/1957
RUN git clone -b branch-${RAPIDS_VERSION} https://github.com/rapidsai/rmm.git --recurse-submodules --depth 1 && \
    pushd rmm && \
    find . -name CMakeLists.txt -print0 | xargs -0 sed -i 's/-Werror//g' && \
    pushd cpp && \
    mkdir build && \
    pushd build && \
    cmake .. -GNinja -DCMAKE_INSTALL_PREFIX=/opt/rmm -DCUDA_STATIC_RUNTIME=ON && \
    pushd _deps/cccl-src/ && \
    git fetch origin main && \
    git cherry-pick -n 9fcb32c228865f21f2b002b29d38a06b4c6fbd73 && \
    popd && \
    cmake --build . --target install && \
    popd && popd && popd && \
    rm -rf rmm

# Install lightweight sudo (not bound to TTY)
RUN set -ex; \
    wget -nv -nc -O /usr/local/bin/gosu "https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-amd64" && \
    chmod +x /usr/local/bin/gosu && \
    gosu nobody true

# Default entry-point to use if running locally
# It will preserve attributes of created files
COPY entrypoint.sh /scripts/

WORKDIR /workspace
ENTRYPOINT ["/scripts/entrypoint.sh"]
